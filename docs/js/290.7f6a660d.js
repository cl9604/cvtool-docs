"use strict";(self["webpackChunk_cvtool_docs"]=self["webpackChunk_cvtool_docs"]||[]).push([[290],{290:(e,l,t)=>{t.r(l),t.d(l,{default:()=>i});var n=t(641),a=t(953),u=t(33);const o="<template>\n    <cv-checked v-model=\"input2\">\n    我同意 {{ '《用户使用协议》' }}\n    </cv-checked>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue';\nimport { CvChecked } from '@cvtool/design';\n\nconst input2 = ref(false)\n<\/script>",c="<template>\n    <cv-checked-group v-model=\"input3\" :data=\"options3\">\n    </cv-checked-group>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue';\nimport { CvCheckedGroup } from '@cvtool/design';\n\nconst input3 = ref([])\nconst options3 = [\n  { label: '选项1', value: '1' },\n  { label: '选项2', value: '2' },\n  { label: '选项3', value: '3' },\n]\n<\/script>",d="<template>\n    <cv-checked v-model=\"checkedAll\" :multiple=\"multiple\" @change=\"multipleChange\">\n    全选\n    </cv-checked>\n    <cv-checked-group v-model=\"input4\" :data=\"options4\">\n    </cv-checked-group>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref } from 'vue';\nimport { CvCheckedGroup, CvChecked } from '@cvtool/design';\n\nconst options4 = [\n  { label: '选项1', value: '1' },\n  { label: '选项2', value: '2' },\n  { label: '选项3', value: '3' },\n]\nconst checkedAll = ref(true)\nconst input4 = ref(options4.map(opt => opt.value))\nconst multiple = computed(() => {\n  if (input4.value.length === 0 || input4.value.length === options4.length) return false\n  return true\n})\n\nconst multipleChange = () => {\n  if (input4.value.length === options4.length) {\n    input4.value.length = 0\n  } else {\n    input4.value = options4.map(option => option.value)\n  }\n}\n<\/script>";var p=t(754);const v=(0,n.pM)({__name:"checked",setup(e){const l=(0,a.KR)(!1),t=(0,a.KR)([]),v=[{label:"选项1",value:"1"},{label:"选项2",value:"2"},{label:"选项3",value:"3"}],s=[{label:"选项1",value:"1"},{label:"选项2",value:"2"},{label:"选项3",value:"3"}],i=(0,a.KR)(!0),m=(0,a.KR)(s.map(e=>e.value)),r=(0,n.EW)(()=>0!==m.value.length&&m.value.length!==s.length),h=()=>{m.value.length===s.length?m.value.length=0:m.value=s.map(e=>e.value)};return(e,k)=>{const g=(0,n.g2)("cv-example");return(0,n.uX)(),(0,n.CE)(n.FK,null,[k[6]||(k[6]=(0,n.Lk)("div",{class:"doc-text"}," 一组备选项中进行选择。 ",-1)),k[7]||(k[7]=(0,n.Lk)("div",{class:"doc-sub-title"}," 基础用法 ",-1)),k[8]||(k[8]=(0,n.Lk)("div",{class:"doc-text"}," 由于选项默认可见，不宜过多，若选项过多，建议使用 Select 选择器。 ",-1)),(0,n.bF)(g,{code:(0,a.R1)(o)},{default:(0,n.k6)(()=>[(0,n.bF)((0,a.R1)(p.HD),{modelValue:l.value,"onUpdate:modelValue":k[0]||(k[0]=e=>l.value=e)},{default:(0,n.k6)(()=>[...k[4]||(k[4]=[(0,n.eW)(" 我同意 "+(0,u.v_)("《用户使用协议》"),-1)])]),_:1},8,["modelValue"])]),_:1},8,["code"]),k[9]||(k[9]=(0,n.Lk)("div",{class:"doc-sub-title"}," 多选框组 ",-1)),k[10]||(k[10]=(0,n.Lk)("div",{class:"doc-text"}," 适用于多个勾选框绑定到同一个数组的情景，通过是否勾选来表示这一组选项中选中的项。 ",-1)),(0,n.bF)(g,{code:(0,a.R1)(c)},{default:(0,n.k6)(()=>[(0,n.bF)((0,a.R1)(p.IZ),{modelValue:t.value,"onUpdate:modelValue":k[1]||(k[1]=e=>t.value=e),data:v},null,8,["modelValue"])]),_:1},8,["code"]),k[11]||(k[11]=(0,n.Lk)("div",{class:"doc-sub-title"}," 全选 ",-1)),k[12]||(k[12]=(0,n.Lk)("div",{class:"doc-text"}," 使用多选框组实现全选 ",-1)),(0,n.bF)(g,{code:(0,a.R1)(d)},{default:(0,n.k6)(()=>[(0,n.bF)((0,a.R1)(p.HD),{modelValue:i.value,"onUpdate:modelValue":k[2]||(k[2]=e=>i.value=e),multiple:r.value,onChange:h},{default:(0,n.k6)(()=>[...k[5]||(k[5]=[(0,n.eW)(" 全选 ",-1)])]),_:1},8,["modelValue","multiple"]),(0,n.bF)((0,a.R1)(p.IZ),{modelValue:m.value,"onUpdate:modelValue":k[3]||(k[3]=e=>m.value=e),data:s},null,8,["modelValue"])]),_:1},8,["code"])],64)}}}),s=v,i=s}}]);